{"version":3,"sources":["components/app/app.js","serviceWorker.js","index.js"],"names":["OtherComponent","lazy","Promise","all","__webpack_require__","e","then","bind","App","react_default","a","createElement","className","style","color","id","react","fallback","target","rel","href","Date","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","app_app","document","getElementById","console","log","process","REACT_APP_OFFLINE","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6MAGMA,aAAiBC,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAuCnBC,EArCH,kBACVC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,uCAC6BF,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAEC,MAAO,YAAtB,qBAC3BL,EAAAC,EAAAC,cAAA,WAFF,oCAKAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,YACWH,EAAAC,EAAAC,cAAA,OAAKI,GAAG,UADnB,eAGAN,EAAAC,EAAAC,cAAA,oCACwBF,EAAAC,EAAAC,cAAA,0BAExBF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACK,EAAA,SAAD,CAAUC,SAAUR,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAACX,EAAD,SAKNS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,mBACmB,IACjBH,EAAAC,EAAAC,cAAA,KAAGO,OAAO,SAASC,IAAI,sBAAsBC,KAAK,6CAAlD,UAEK,IACLX,EAAAC,EAAAC,cAAA,KACEO,OAAO,SACPC,IAAI,sBACJC,KAAK,oDAHP,0BAK2B,IAAIC,MAAOC,kBCvBxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SAEjDC,QAAQC,IAAI,0BAA2BC,iFAAYC,mBACnDH,QAAQC,IAAI,2BAA4BC,iFAAYC,mBACpDH,QAAQC,IAAI,2BAA4BC,iFAAYC,mBD6H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.e442bfe9.chunk.js","sourcesContent":["import React, { lazy, Suspense } from 'react';\nimport './app.scss';\n\nconst OtherComponent = lazy(() => import('../other-component/other-component'));\n\nconst App = () => (\n  <div>\n    <div className=\"welcome\">\n      <p>\n        Welcome to Ozone World for <span style={{ color: '#61dafb' }}> New react hooks!</span>\n        <br />\n        Clean Code for Rapid Development\n      </p>\n      <div className=\"content\">\n        Built in <div id=\"heart\" /> with React\n      </div>\n      <div>\n        To get started, edit: <pre>src/App.js</pre>\n      </div>\n      <div>\n        <Suspense fallback={<div>Loading...</div>}>\n          <OtherComponent />\n        </Suspense>\n      </div>\n    </div>\n\n    <div className=\"footer\">\n      Orchestrated by:{' '}\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/hansiemithun/\">\n        Mithun\n      </a>{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://www.npmjs.com/package/generator-ozone-ui\"\n      >\n        &copy; Copyright 2018 - {new Date().getFullYear()}\n      </a>\n    </div>\n  </div>\n);\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  //if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  if (\n    process.env.REACT_APP_OFFLINE === \"true\" ||\n    (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator)\n  ) {\n    console.log(\"entered to register\");\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nconsole.log('OFFLINE_MODE => ', typeof process.env.REACT_APP_OFFLINE);\nconsole.log('OFFLINE_MODE2 => ', typeof process.env.REACT_APP_OFFLINE);\nconsole.log('OFFLINE_MODE3 => ', typeof process.env.REACT_APP_OFFLINE);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// if (\n//   process.env.NODE_ENV === 'production' ||\n//   process.env.REACT_APP_OFFLINE === 'true'\n// ) {\n//   serviceWorker.register();\n// } else {\n//   serviceWorker.unregister();\n// }\n\nserviceWorker.unregister();\n"],"sourceRoot":""}